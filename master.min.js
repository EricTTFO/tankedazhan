/*! tankWar 2017-06-17 */
function checkEqual(a, b) {
    return a[0] === b[0] && a[1] === b[1] ? !0 : !1
}

function getRandomNum(a, b) {
    var c = b - a, d = Math.random();
    return a + Math.round(d * c)
}

function getURLParameter(a) {
    return decodeURI((RegExp(a + "=(.+?)(&|$)").exec(location.search) || [, null])[1])
}

function Grid(a, b) {
    this.rowsNum = a, this.colsNum = b, this.draw = function () {
        for (var a = "", b = 0; b < this.rowsNum; b++) {
            a += '<div class="row clearfix">';
            for (var c = 0; c < this.colsNum; c++) a += '<div class="col">', a += "</div>";
            a += "</div>"
        }
        jQuery("#tank-grid").html(a)
    }, this.init = function () {
        this.draw()
    }
}

function Bullet(a, b, c, d) {
    function e(a, b) {
        if (a.hasClass("on")) if (a.hasClass("tank")) {
            var c = game.tankContainer.checkWhichTank(this.coordinate);
            c && (c.destroy(), c.constructor == MyTank ? game.stopGame() : this.tank.constructor == MyTank && game.addScore()), b.removeClass("on").removeClass("bull"), this.tank.constructor == MyTank && b.removeClass("my"), this.destroy()
        } else a.hasClass("bull") && (a.hasClass("stopped") ? (b.removeClass("on").removeClass("bull"), this.tank.constructor == MyTank && b.removeClass("my"), this.destroy()) : (b.addClass("stopped"), clearInterval(this.moveThread), this.status = !1)); else b.removeClass("on").removeClass("bull"), a.addClass("on bull"), this.tank.constructor == MyTank && (b.removeClass("my"), a.addClass("my"))
    }

    function f() {
        if (this.coordinate[1] - 1 < 0) return void this.destroy();
        var a = this.coordinate, b = jQuery("#tank-grid .row:nth-child(" + a[1] + ") .col:nth-child(" + a[0] + ")");
        this.coordinate = [this.coordinate[0], this.coordinate[1] - 1];
        var c = jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")");
        e.call(this, c, b)
    }

    function g() {
        if (this.coordinate[1] + 1 > gridRowsNum + 1) return void this.destroy();
        var a = this.coordinate, b = jQuery("#tank-grid .row:nth-child(" + a[1] + ") .col:nth-child(" + a[0] + ")");
        this.coordinate = [this.coordinate[0], this.coordinate[1] + 1];
        var c = jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")");
        e.call(this, c, b)
    }

    function h() {
        if (this.coordinate[0] - 1 < 0) return void this.destroy();
        var a = this.coordinate, b = jQuery("#tank-grid .row:nth-child(" + a[1] + ") .col:nth-child(" + a[0] + ")");
        this.coordinate = [this.coordinate[0] - 1, this.coordinate[1]];
        var c = jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")");
        e.call(this, c, b)
    }

    function i() {
        if (this.coordinate[0] + 1 > gridColsNum + 1) return void this.destroy();
        var a = this.coordinate, b = jQuery("#tank-grid .row:nth-child(" + a[1] + ") .col:nth-child(" + a[0] + ")");
        this.coordinate = [this.coordinate[0] + 1, this.coordinate[1]];
        var c = jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")");
        e.call(this, c, b)
    }

    this.coordinate = a, this.direction = b, this.speed = c, this.tank = d, this.moveThread = null, this.status = !0, this.init = function () {
        jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")").addClass("on bull"), this.tank.constructor == MyTank && jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")").addClass("my");
        var a = this;
        switch (a.direction) {
            case 37:
                this.moveThread = setInterval(function () {
                    h.call(a)
                }, this.speed);
                break;
            case 38:
                this.moveThread = setInterval(function () {
                    f.call(a)
                }, this.speed);
                break;
            case 39:
                this.moveThread = setInterval(function () {
                    i.call(a)
                }, this.speed);
                break;
            case 40:
                this.moveThread = setInterval(function () {
                    g.call(a)
                }, this.speed)
        }
    }, this.destroy = function () {
        clearInterval(this.moveThread), jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")").removeClass("on").removeClass("bull"), this.tank.constructor == MyTank && jQuery("#tank-grid .row:nth-child(" + this.coordinate[1] + ") .col:nth-child(" + this.coordinate[0] + ")").removeClass("my"), this.status = !1
    }
}

function Tank(a, b) {
    this.heart = a, this.direction = b, this.status = !0, this.getDataArr = function () {
        var a = [this.heart];
        return 37 == this.direction ? (a.push([this.heart[0] - 1, this.heart[1]]), a.push([this.heart[0], this.heart[1] - 1]), a.push([this.heart[0], this.heart[1] + 1]), a.push([this.heart[0] + 1, this.heart[1] - 1]), a.push([this.heart[0] + 1, this.heart[1] + 1])) : 38 == this.direction ? (a.push([this.heart[0], this.heart[1] - 1]), a.push([this.heart[0] - 1, this.heart[1]]), a.push([this.heart[0] + 1, this.heart[1]]), a.push([this.heart[0] - 1, this.heart[1] + 1]), a.push([this.heart[0] + 1, this.heart[1] + 1])) : 39 == this.direction ? (a.push([this.heart[0] + 1, this.heart[1]]), a.push([this.heart[0], this.heart[1] - 1]), a.push([this.heart[0], this.heart[1] + 1]), a.push([this.heart[0] - 1, this.heart[1] - 1]), a.push([this.heart[0] - 1, this.heart[1] + 1])) : 40 == this.direction && (a.push([this.heart[0], this.heart[1] + 1]), a.push([this.heart[0] - 1, this.heart[1]]), a.push([this.heart[0] + 1, this.heart[1]]), a.push([this.heart[0] - 1, this.heart[1] - 1]), a.push([this.heart[0] + 1, this.heart[1] - 1])), a
    }, this.checkValidation = function () {
        if (this.heart[0] <= 1 || this.heart[0] >= gridColsNum || this.heart[1] <= 1 || this.heart[1] >= gridRowsNum) return !1;
        for (var a = this.getDataArr(), b = 0; b < a.length; b++) {
            var c = a[b];
            if (jQuery("#tank-grid .row:nth-child(" + c[1] + ") .col:nth-child(" + c[0] + ")").hasClass("on")) return !1
        }
        return !0
    }, this.draw = function () {
        if (this.status) for (var a = this.getDataArr(), b = 0; b < a.length; b++) jQuery("#tank-grid .row:nth-child(" + a[b][1] + ") .col:nth-child(" + a[b][0] + ")").addClass("on tank")
    }, this.removeDraw = function () {
        for (var a = this.getDataArr(), b = 0; b < a.length; b++) jQuery("#tank-grid  .row:nth-child(" + a[b][1] + ") .col:nth-child(" + a[b][0] + ")").removeClass("on").removeClass("tank")
    }, this.move = function (a) {
        var b = this.heart, c = this.direction;
        if (this.removeDraw(), this.direction = a, c = a) switch (a) {
            case 37:
                this.heart = [b[0] - 1, b[1]];
                break;
            case 38:
                this.heart = [b[0], b[1] - 1];
                break;
            case 39:
                this.heart = [b[0] + 1, b[1]];
                break;
            case 40:
                this.heart = [b[0], b[1] + 1]
        }
        return this.checkValidation() ? (this.draw(), !0) : (this.heart = b, this.direction = c, this.draw(), !1)
    }, this.fire = function () {
        var a = null;
        switch (this.direction) {
            case 37:
                a = [this.heart[0] - 2, this.heart[1]];
                break;
            case 38:
                a = [this.heart[0], this.heart[1] - 2];
                break;
            case 39:
                a = [this.heart[0] + 2, this.heart[1]];
                break;
            case 40:
                a = [this.heart[0], this.heart[1] + 2];
                break;
            default:
                a = [this.heart[0] - 2, this.heart[1]]
        }
        var b = jQuery("#tank-grid .row:nth-child(" + a[1] + ") .col:nth-child(" + a[0] + ")");
        if (b.hasClass("on")) {
            if (b.hasClass("tank")) {
                var c = game.tankContainer.checkWhichTank(a);
                c && (c.destroy(), c.constructor == MyTank ? game.stopGame() : this.constructor == MyTank && game.addScore())
            }
        } else {
            var d = new Bullet(a, this.direction, bulletSpeed, this);
            d.init()
        }
    }, this.destroy = function () {
        this.removeDraw(), this.status = !1
    }
}

function NPCTank(a, b) {
    Tank.call(this, a, b), this.thread = null, this.init = function () {
        var a = this;
        a.draw(), a.run()
    }, this.attack = function () {
    }, this.destroy = function () {
        this.removeDraw(), this.status = !1, clearInterval(this.thread)
    }, this.run = function () {
        if (1 == game.status) {
            var a = this, b = getRandomNum(1, 10), c = getRandomNum(37, 40 + NPCTankFireTimes);
            if (37 == c || 38 == c || 39 == c || 40 == c) {
                var d = 0;
                a.thread = setInterval(function () {
                    (++d === b || 0 == a.move(c)) && (clearInterval(a.thread), a.status && a.run())
                }, NPCTankSpeed)
            } else a.fire(), a.status && a.run()
        }
    }
}

function MyTank(a, b) {
    Tank.call(this, a, b);
    var c = this;
    this.draw = function () {
        for (var a = this.getDataArr(), b = 0; b < a.length; b++) jQuery("#tank-grid .row:nth-child(" + a[b][1] + ") .col:nth-child(" + a[b][0] + ")").addClass("on tank my")
    }, this.removeDraw = function () {
        for (var a = this.getDataArr(), b = 0; b < a.length; b++) jQuery("#tank-grid  .row:nth-child(" + a[b][1] + ") .col:nth-child(" + a[b][0] + ")").removeClass("on").removeClass("tank").removeClass("my")
    }, this.moveByKey = function (a) {
        (37 == a.keyCode || 38 == a.keyCode || 39 == a.keyCode || 40 == a.keyCode) && (c.move(a.keyCode), a.preventDefault())
    }, this.fireByKey = function (a) {
        32 == a.keyCode && (c.fire(), a.preventDefault())
    }, this.keyBoardControl = function () {
        var a = this;
        jQuery(document).on("keydown", a.moveByKey), jQuery(document).on("keyup", a.fireByKey)
    }, this.offKey = function () {
        var a = this;
        jQuery(document).off("keydown", a.moveByKey), jQuery(document).off("keyup", a.fireByKey)
    }, this.init = function () {
        this.draw(), this.keyBoardControl()
    }, this.reset = function () {
        this.heart = [Math.ceil(gridColsNum / 2), Math.ceil(gridRowsNum / 2)], this.direction = getRandomNum(37, 40), this.status = !0, this.removeDraw(), this.draw()
    }
}

function TankContainer() {
    this.tanks = [], this.checkWhichTank = function (a) {
        for (var b = this.tanks.length, c = 0; b > c; c++) for (var d = this.tanks[c], e = d.getDataArr(), f = 0; f < e.length; f++) if (checkEqual(a, e[f])) return this.tanks.splice(c, 1), d;
        return null
    }
}

function Game() {
    function a() {
        var a = NPCTank.getRandTank();
        a.init(), this.tankContainer.tanks.push(a)
    }

    function b() {
        var a = this;
        jQuery("#start-game").on("click", function (b) {
            return a.startNew(), b.preventDefault(), !1
        }), jQuery("#pause-game").on("click", function (b) {
            return jQuery(this).hasClass("disabled") ? !1 : (jQuery(this).hasClass("paused") ? a.continueGame() : a.pauseGame(), b.preventDefault(), !1)
        }), jQuery("#reset-game").on("click", function (b) {
            return a.resetConfig(), a.startNew(), b.preventDefault(), !1
        })
    }

    function c() {
        var a = jQuery("#select-gridRowNum").val(), b = jQuery("#select-gridColNum").val(),
            c = jQuery("#select-bullet-speed").val(), d = jQuery("#select-npctank-count").val(),
            e = jQuery("#select-npctank-speed").val(), f = jQuery("#select-npctank-time").val(),
            g = jQuery("#select-npctank-fire").val();
        localStorage.setItem("gridRowsNum", a), localStorage.setItem("gridColsNum", b), localStorage.setItem("bulletSpeed", c), localStorage.setItem("NPCTanksCount", d), localStorage.setItem("NPCTankSpeed", e), localStorage.setItem("NPCTankCheckTime", f), localStorage.setItem("NPCTankFireTimes", g)
    }

    this.status = 0, this.grid = null, this.tankContainer = null, this.myTank = null, this.thread = null, this.score = 0, this.init = function () {
        var c = this;
        this.loadConfig(), gridRowsNum = parseInt(jQuery("#select-gridRowNum").val()), gridColsNum = parseInt(jQuery("#select-gridColNum").val()), bulletSpeed = parseInt($("#select-bullet-speed").val()), NPCTanksCount = parseInt($("#select-npctank-count").val()), NPCTankSpeed = parseInt($("#select-npctank-speed").val()), NPCTankCheckTime = parseInt($("#select-npctank-time").val()), NPCTankFireTimes = parseInt($("#select-npctank-fire").val()), c.status = 1, c.grid = new Grid(gridRowsNum, gridColsNum), c.grid.init(), b.call(c), c.tankContainer = new TankContainer, c.myTank = new MyTank([Math.ceil(gridColsNum / 2), Math.ceil(gridRowsNum / 2)], getRandomNum(37, 40)), c.myTank.init(), c.tankContainer.tanks.push(this.myTank), a.call(c), jQuery("#pause-game").removeClass("disabled"), jQuery("#reset-game").removeClass("disabled"), c.thread = setInterval(function () {
            c.tankContainer.tanks.length - 1 < NPCTanksCount && a.call(c)
        }, NPCTankCheckTime), $("#game-state").text(gameStateText[c.status])
    }, this.startNew = function () {
        var b = this;
        gridRowsNum = parseInt($("#select-gridRowNum").val()), gridColsNum = parseInt($("#select-gridColNum").val()), bulletSpeed = parseInt($("#select-bullet-speed").val()), NPCTanksCount = parseInt($("#select-npctank-count").val()), NPCTankSpeed = parseInt($("#select-npctank-speed").val()), NPCTankCheckTime = parseInt($("#select-npctank-time").val()), NPCTankFireTimes = parseInt($("#select-npctank-fire").val()), c(), b.status = 1, b.score = 0, jQuery("#score-num").text(this.score), b.grid.rowsNum = gridRowsNum, b.grid.colsNum = gridColsNum, b.grid.draw();
        for (var d = 0; d < b.tankContainer.tanks.length; d++) {
            var e = b.tankContainer.tanks[d];
            e.destroy()
        }
        b.tankContainer.tanks.length = 0, b.myTank.reset(), b.myTank.keyBoardControl(), b.tankContainer.tanks.push(b.myTank), a.call(b), jQuery("#pause-game").removeClass("disabled"), jQuery("#reset-game").removeClass("disabled"), clearInterval(b.thread), b.thread = setInterval(function () {
            b.tankContainer.tanks.length - 1 < NPCTanksCount && a.call(b)
        }, NPCTankCheckTime), jQuery("#game-state").text(gameStateText[b.status])
    }, this.pauseGame = function () {
        this.status = 2, clearInterval(this.thread);
        for (var a = 0; a < this.tankContainer.tanks.length; a++) {
            var b = this.tankContainer.tanks[a];
            clearInterval(b.thread)
        }
        this.myTank.offKey(), jQuery("#pause-game").text("Continue"), jQuery("#pause-game").addClass("paused"), jQuery("#game-state").text(gameStateText[this.status])
    }, this.stopGame = function () {
        this.status = 0, clearInterval(this.thread);
        for (var a = 0; a < this.tankContainer.tanks.length; a++) {
            var b = this.tankContainer.tanks[a];
            clearInterval(b.thread)
        }
        this.myTank.offKey(), jQuery("#pause-game").addClass("disabled"), jQuery("#game-state").text(gameStateText[this.status])
    }, this.addScore = function () {
        jQuery("#score-num").text(++this.score)
    }, this.continueGame = function () {
        var b = this;
        b.status = 1, b.thread = setInterval(function () {
            b.tankContainer.tanks.length - 1 < NPCTanksCount && a.call(b)
        }, NPCTankCheckTime);
        for (var c = 0; c < this.tankContainer.tanks.length; c++) {
            var d = this.tankContainer.tanks[c];
            d.run && d.run()
        }
        this.myTank.keyBoardControl(), jQuery("#pause-game").text("Pause"), jQuery("#pause-game").removeClass("paused"), jQuery("#game-state").text(gameStateText[b.status])
    }, this.getConfig = function () {
        var a = {};
        return a.gridRowsNum = localStorage.getItem("gridRowsNum") || gridRowsNum, a.gridColsNum = localStorage.getItem("gridColsNum") || gridColsNum, a.bulletSpeed = localStorage.getItem("bulletSpeed") || bulletSpeed, a.NPCTanksCount = localStorage.getItem("NPCTanksCount") || NPCTanksCount, a.NPCTankSpeed = localStorage.getItem("NPCTankSpeed") || NPCTankSpeed, a.NPCTankCheckTime = localStorage.getItem("NPCTankCheckTime") || NPCTankCheckTime, a.NPCTankFireTimes = localStorage.getItem("NPCTankFireTimes") || NPCTankFireTimes, a
    }, this.resetConfig = function () {
        localStorage.setItem("gridRowsNum", 51), localStorage.setItem("gridColsNum", 51), localStorage.setItem("bulletSpeed", 20), localStorage.setItem("NPCTanksCount", 4), localStorage.setItem("NPCTankSpeed", 500), localStorage.setItem("NPCTankCheckTime", 3e3), localStorage.setItem("NPCTankFireTimes", 1), this.loadConfig()
    }, this.loadConfig = function () {
        var a = this.getConfig();
        jQuery("#select-gridRowNum").val(a.gridRowsNum), jQuery("#select-gridColNum").val(a.gridColsNum), jQuery("#select-bullet-speed").val(a.bulletSpeed), jQuery("#select-npctank-count").val(a.NPCTanksCount), jQuery("#select-npctank-speed").val(a.NPCTankSpeed), jQuery("#select-npctank-time").val(a.NPCTankCheckTime), jQuery("#select-npctank-fire").val(a.NPCTankFireTimes)
    }
}

!function (a) {
    var b = function (a) {
        return new b.fn.init(a)
    };
    b.fn = b.prototype = {
        init: function (a) {
            if (!a) return this;
            if (a.nodeType) return this[0] = a, this.length = 1, this;
            if ("string" == typeof a) if ("<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && a.length >= 3) ; else for (var b = document.querySelectorAll(a), c = 0; c < b.length; c++) return this[c] = b[c], this.length = b.length, this
        }
    }, b.fn.init.prototype = b.fn, b.prototype.map = function (a) {
        for (var b = [], c = 0; c < this.length; c++) b.push(a.call(this, this[c], c));
        return b
    }, b.prototype.forEach = function (a) {
        return this.map(a), this
    }, b.prototype.mapOne = function (a) {
        var b = this.map(a);
        return b.length > 1 ? b : b[0]
    }, b.prototype.text = function (a) {
        return "undefined" != typeof a ? this.forEach(function (b) {
            b.innerText ? b.innerText = a : b.textContent && (b.textContent = a)
        }) : this.mapOne(function (a) {
            return a.innerText ? a.innerText : a.textContent ? a.textContent : void 0
        })
    }, b.prototype.html = function (a) {
        return "undefined" != typeof a ? this.forEach(function (b) {
            b.innerHTML = a
        }) : this.mapOne(function (a) {
            return a.innerHTML
        })
    }, b.prototype.addClass = function (a) {
        var b = "";
        if ("string" != typeof a) for (var c = 0; c < a.length; c++) b += " " + a[c]; else b = " " + a;
        return this.forEach(function (a) {
            a.className += b
        })
    }, b.prototype.removeClass = function (a) {
        return this.forEach(function (b) {
            for (var c, d = b.className.split(" "); (c = d.indexOf(a)) > -1;) d = d.slice(0, c).concat(d.slice(++c));
            b.className = d.join(" ")
        })
    }, b.prototype.hasClass = function (a) {
        return this.length > 0 ? this[0].className.indexOf(a) >= 0 ? !0 : !1 : void 0
    }, b.prototype.attr = function (a, b) {
        return "undefined" != typeof b ? this.forEach(function (c) {
            c.setAttribute(a, b)
        }) : this.mapOne(function (b) {
            return b.getAttribute(a)
        })
    }, b.prototype.val = function (a) {
        return "undefined" != typeof a ? this.forEach(function (b) {
            b.value = a
        }) : this.mapOne(function (a) {
            return "SELECT" == a.nodeName ? a.value : void 0
        })
    }, b.prototype.append = function (a) {
        return this.forEach(function (b, c) {
            a.forEach(function (a) {
                b.appendChild(c > 0 ? a.cloneNode(!0) : a)
            })
        })
    }, b.prototype.prepend = function (a) {
        return this.forEach(function (b, c) {
            for (var d = a.length - 1; d > -1; d--) b.insertBefore(c > 0 ? a[d].cloneNode(!0) : a[d], b.firstChild)
        })
    }, b.prototype.remove = function () {
        return this.forEach(function (a) {
            return a.parentNode.removeChild(a)
        })
    }, b.prototype.on = function () {
        return document.addEventListener ? function (a, b) {
            return this.forEach(function (c) {
                c.addEventListener(a, b, !1)
            })
        } : document.attachEvent ? function (a, b) {
            return this.forEach(function (c) {
                c.attachEvent("on" + a, b)
            })
        } : function (a, b) {
            return this.forEach(function (c) {
                c["on" + a] = b
            })
        }
    }(), b.prototype.off = function () {
        return document.removeEventListener ? function (a, b) {
            return this.forEach(function (c) {
                c.removeEventListener(a, b, !1)
            })
        } : document.detachEvent ? function (a, b) {
            return this.forEach(function (c) {
                c.detachEvent("on" + a, b)
            })
        } : function (a) {
            return this.forEach(function (b) {
                b["on" + a] = null
            })
        }
    }(), a.jQuery = a.$ = b
}(window);
var gridRowsNum = 51, gridColsNum = 51, bulletSpeed = 20, NPCTanksCount = 4, NPCTankSpeed = 500, NPCTankCheckTime = 3e3,
    NPCTankFireTimes = 1, gameStateText = ["Stopped", "Running", "Paused"];
NPCTank.getRandTank = function () {
    for (var a = getRandomNum(37, 40), b = getRandomNum(2, gridColsNum - 1), c = getRandomNum(2, gridRowsNum - 1); jQuery("#tank-grid .row:nth-child(" + (c - 1) + ") .col:nth-child(" + (b - 1) + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + (c - 1) + ") .col:nth-child(" + b + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + (c - 1) + ") .col:nth-child(" + (b + 1) + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + c + ") .col:nth-child(" + (b - 1) + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + c + ") .col:nth-child(" + b + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + c + ") .col:nth-child(" + (b + 1) + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + (c + 1) + ") .col:nth-child(" + (b - 1) + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + (c + 1) + ") .col:nth-child(" + b + ")").hasClass("on") || jQuery("#tank-grid .row:nth-child(" + (c + 1) + ") .col:nth-child(" + (b + 1) + ")").hasClass("on");) b = getRandomNum(2, gridColsNum - 1), c = getRandomNum(2, gridRowsNum - 1);
    var d = new NPCTank([b, c], a);
    return d
};